{"version":3,"sources":["webpack:///./node_modules/@actions/core/lib/command.js","webpack:///./node_modules/@actions/core/lib/core.js","webpack:///./node_modules/@actions/core/lib/file-command.js","webpack:///./node_modules/@actions/core/lib/utils.js","webpack:///external \"fs\"","webpack:///external \"os\"","webpack:///external \"path\"","webpack:///webpack/bootstrap","webpack:///external \"child_process\"","webpack:///./cvw/common.ts","webpack:///./cvw/gradle.ts","webpack:///./cvw/index.ts"],"names":[],"mappings":";;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,wBAAwB,mBAAO,CAAC,EAAI;AACpC,gBAAgB,mBAAO,CAAC,GAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI,GAAG,oBAAoB;AAChE;AACA;AACA;AACA;AACA,qBAAqB,WAAW,EAAE,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;AC9Ea;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,kBAAkB,mBAAO,CAAC,GAAW;AACrC,uBAAuB,mBAAO,CAAC,GAAgB;AAC/C,gBAAgB,mBAAO,CAAC,GAAS;AACjC,wBAAwB,mBAAO,CAAC,EAAI;AACpC,0BAA0B,mBAAO,CAAC,GAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC,gBAAgB,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK,IAAI,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,UAAU;AAChG;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,6BAA6B,UAAU,EAAE,eAAe,EAAE,oBAAoB;AAC9E;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC;AAC3E;AACA,4DAA4D,KAAK;AACjE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA,gBAAgB;AAChB,gC;;;;;;;AC7Oa;AACb;AACA;AACA;AAC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","file":"main.js","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"child_process\");;","import { spawn } from \"child_process\"\n\nexport enum BuildTarget {\n  SNAPSHOT = \"SNAPSHOT\",\n  MILESTONE = \"MILESTONE\",\n  RELEASE = \"RELEASE\",\n  PRE_RELEASE = \"PRE_RELEASE\",\n  LOCAL = \"LOCAL\"\n}\n\nexport const tmp = \"/tmp\"\nexport const GS_GH_EVENT = \"GS_GH_EVENT\"\nexport const GS_SECRETS = \"GS_SECRETS\"\n\nexport const runCmd = (cmd: string, args: string[], env: any = undefined) => {\n  console.log(`Running: ${cmd} ${args}`)\n  return new Promise((resolve, reject) => {\n    const stdoutLines: string[] = []\n    const stdErrlines: string[] = []\n    const proc = spawn(cmd, args, env ? {env} : undefined)\n    proc.stdout.on(\"data\", buf => {\n      process.stdout.write(buf.toString())\n      stdoutLines.push(buf.toString())\n    })\n    proc.stderr.on(\"data\", buf => {\n      process.stderr.write(buf.toString())\n      stdErrlines.push(buf.toString())\n    })\n    proc.on(\"exit\", code => {\n      console.log(`process exit code: [${code}]`)\n      const out = {stdoutLines, stdErrlines, code}\n      return code != 0 ? reject(out) : resolve(out)\n    })\n  })\n}\n","import { existsSync } from \"fs\"\nimport { resolve } from \"path\"\nimport { GS_GH_EVENT, GS_SECRETS, runCmd, tmp } from \"cvw/common\"\n\nconst gradle = \"gradle\"\n\nexport const loadGradle = (gradleDist: string, gradleVer: string): Promise<any> => {\n  return existsSync(gradleDist) ? Promise.resolve()\n    : runCmd(\n        \"wget\", [\"--quiet\", `https://services.gradle.org/distributions/${gradleVer}-bin.zip`]\n      ).then(() => runCmd(\"unzip\", [\"-q\", \"-d\", tmp, `${gradleVer}-bin.zip`]))\n}\n\nexport const gradleBuild = (gradleRoot: string, projectRoot: string, commit: any): Promise<any> => {\n  const buildArgs: string[] = [\"build\", \"-b\", resolve(projectRoot, \"build.gradle.kts\")]\n  const {PATH} = process.env\n  const secrets = JSON.parse(process.env[GS_SECRETS])\n  const gradleEnv = {...process.env,\n    PATH: `${PATH}:${resolve(gradleRoot, \"bin\")}`,\n    [GS_GH_EVENT]: JSON.stringify(commit)\n  } as any\n  Object.keys(secrets).forEach(k => gradleEnv[k] = secrets[k])\n  return runCmd(gradle, buildArgs, gradleEnv)\n}\n","import { error, info, setFailed, warning } from \"@actions/core\"\nimport { normalize, resolve } from \"path\"\nimport * as fs from \"fs\";\n\nimport { GS_GH_EVENT, BuildTarget, tmp } from \"cvw/common\"\nimport { loadGradle, gradleBuild } from \"cvw/gradle\"\n\nconst event = JSON.parse(process.env[GS_GH_EVENT])\nconst orgConfigJson = fs.readFileSync(\"./org-config.json\", \"utf-8\");\nconst orgConfig = JSON.parse(orgConfigJson);\n\nconst errorHandler = (e: any) => {\n  const eJson = JSON.stringify(e, null, 2)\n  if (Object.keys(e).length == 0) { error(e.message) }\n  else { error(eJson) }\n  setFailed(e)\n}\n\nconst buildInit = (commit: any, buildTarget: BuildTarget): Promise<void> => {\n  const gradleVer = orgConfig.devConfig.versions.gradle\n  const gradleDist = resolve(tmp, gradleVer)\n  commit.buildTarget = buildTarget\n  return loadGradle(gradleDist, gradleVer).then(() => gradleBuild(gradleDist, normalize(process.cwd()), commit))\n}\n\nconst onCommit = (commit: any): Promise<any> => {\n  const {ref} = commit\n\n  info(\"*******************************************************************\")\n  info(`* Target ref: ${ref}`)\n  info(\"*******************************************************************\")\n\n  if (ref && ref.includes(\"feature/\")) {\n    return buildInit(commit, BuildTarget.SNAPSHOT)\n  } else if (ref && ref.includes(\"develop\")) {\n    return buildInit(commit, BuildTarget.MILESTONE)\n  } else if (ref.includes(\"refs/tags\")) {\n    return buildInit(commit, BuildTarget.RELEASE)\n  } else if (ref && (ref.includes(\"master\") || ref.includes(\"main\"))) {\n    return buildInit(commit, BuildTarget.PRE_RELEASE)\n  }\n  warning(`Building non-managed ref combination: ${ref}`)\n  return buildInit(commit, BuildTarget.LOCAL)\n}\n\nif (event.ref) {\n  onCommit(event).catch(errorHandler)\n}\n"],"sourceRoot":""}